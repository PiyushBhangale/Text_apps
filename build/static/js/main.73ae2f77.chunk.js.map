{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","handleCorrect","state","newlist","console","log","handleSubmit","preventDefault","$","ajax","type","headers","X-CSRFToken","window","CSRF_TOKEN","url","data","success","spellings","corrected","_this2","react_default","a","createElement","className","Grid","container","style","padding","Row","Column","Header","as","dividing","Message","Form","TextArea","margin","rows","placeholder","onChange","Button","color","basic","tabindex","onClick","map","x","index","length","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73ae2f77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport $ from 'jquery';\nimport {Grid,Header,Message, Form, TextArea ,Button,Icon,Label} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  this.state={\n    value:\"\",\n    spellings:[],\n    newlist:\"\",\n    corrected:[]\n\n  }}\n  componentDidMount(){\n\n\n\n\n\n\n  }  \n  handleChange=(event)=> {\n   \n    this.setState({value: event.target.value});\n  }\n  handleCorrect=(event)=>{\n    this.setState({value: this.state.newlist});\n    \n   console.log(\"correct\")\n  }\n  handleSubmit=(event) =>{\n  \n    console.log(this.state.value,\"valuee\")\n    event.preventDefault();\n    $.ajax({\n      type: 'POST',\n      headers: {\n        'X-CSRFToken': window.CSRF_TOKEN \n    },\n      url:'/api/getInput',\n      data:{\n        data:this.state.value,\n\n      },\n      success:(data)=>{\n        this.setState({\n          spellings:data['spelling'],\n          corrected:data['corrected'],\n          newlist:data['list']\n        })\n        console.log(data,\"SPELLINGSSS\")\n    }\n      \n        \n      })\n   \n      }  \n  \n  render() {\n  \n    \n    return (\n      <div className=\"App\">\n        \n\n        <Grid container style={{ padding: '5em 0em' }}>\n    <Grid.Row>\n      <Grid.Column>\n        <Header as='h1' dividing>\n          Spell Checker\n        </Header>\n      </Grid.Column>\n    </Grid.Row>\n\n    <Grid.Row>\n      <Grid.Column>\n        <Message>\n          <Header as='h1'>Check for incorrect spellings in here !</Header>\n            <Form >\n              <TextArea style={{ margin: '2em 0em' }} rows=\"7\" placeholder='Tell us more' type=\"text\" value={this.state.value} onChange={this.handleChange}  />\n              \n              <Grid.Row>\n                <Grid.Column>\n                  <Button color='blue'type='submit' basic tabindex='0' onClick={this.handleSubmit} style={{ margin: '1em 1em' }}>Check </Button>\n                  <Button color='green'type='submit'   basic tabindex='0' onClick={this.handleCorrect} style={{ margin: '1em 1em' }}>Correct </Button>\n       \n                </Grid.Column>\n              </Grid.Row>\n                \n              \n            </Form>\n             \n        </Message>\n      </Grid.Column>\n</Grid.Row>\n        \n        {/* <form onSubmit={this.handleSubmit}>\n            <label>\n              Text:\n              <textarea type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Submit\" />\n        </form> */}\n        <span>\n        {this.state.spellings.map((x, index) => (\n          \n        <a>{x}{index === this.state.spellings.length-1 ? <a>.</a>:<a>,</a>}</a>\n    ))}</span>\n     <span>\n        {this.state.corrected.map((x, index) => (\n          \n        <a>{x}{index === this.state.spellings.length-1 ? <a>.</a>:<a>,</a>}</a>\n    ))}</span>\n    \n    {/* <span>\n        {this.state.newlist}\n    </span> */}\n       </Grid>\n                \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}